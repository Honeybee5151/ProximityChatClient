Hello it is me Shangapallia again. Here we have a proximity chat for rotmg-pservers created by Claude.
So for the main batch of files the navigation is src -> kabam -> rotmg -> ProximityChat.

Proximity chat: Enabled only in dungeons. Groups people in 4, if someone is left alone, a group can become 5.
The system works so that when the first person enters the dungeon he creates a voice channel, and the next people
to come join that voice channel. Then the fifth person creates a new one. This continues until the portal has closed,
if a person is left alone at that point, they will join the latest group which will then have 5 people.

This system eliminates the chaos and bandwidth problem of dense areas. The other solution would be a priority system
in the realm where you hear people who are locked/guild. That system though, sort of diminishes the purpose of
proximity chat: to make random people talk to each other.
This current system creates an incentive to do dungeons,  and not stick to realm farming. For those social people who
want to do dungeons and talk to random people.

Content: An ingame UI, which is initialized in PCManager. Its parts are, PCCycleButton, PCGenericToggle, PCMask,
PCMicSelector, PCNumberSlider, PCPushToTalkButton, PCSlider, PCTabs, PCToggle, PCVisualiser, PCVolumeSlider. Although,
most of the UI stuff is initialized in PCTabs which is then initialized in PCManger, thereafter in GameSprite.

The proximity-chat comes with an authentication-system, the client receives from the server in gameserverconnections the
code from the server at login. It is generated at account generation, but a system in place for existing accounts exists
so you do not need to worry about that. After receiving the code, it is transferred from PCBridge (the link between the
c# program and the client) to the c# program. It is then used as like a check between the server and and c# program. The
system was accidentally tested when I removed the receiver in gameserverconnection and the VoiceHandler (the main
receiver and sender in the server) did not receive the voice bytes. So spoofing is countered.

VoiceChatService is initalized in titleview. It basically activates the chsarp program. It is like the manager of
PCBridge.

The system comes with push-to-talk which is tested and works. And a incoming-sound volume slider which works. And a mic
selector which works. Furthermore, there is a prioritize system, which is customizable, and is supposed to make the
experience in big groups more enjoyable. That system is not tested yet.

When you have added the stuff from the server to your server, you need to add exceptions in the firewall to 2051,
both in your provider and your VPS.

To get this all to work, you need to publish the console1, and put the contents of the publish by your swf, moe.png,
etc. You can also copy the publish content from its repository and it will work as well.

//777592 is the navigation code. Basically every (should be every) new code section in files other than the batch
have the code before so that you can easily find what is needed to implement.

An important implementation (well all parts are quite needed), is that in the server side -> connectionlistener is what
activates the 2051 port.

Bugs:

1. After leaving the game overnight, voice did not work.
2. One time it did not send voice, and pressing guild to deactivate fixed it. Could not replicate this.
3. When you log into the game, and switch teh guild activation to enable from disable for the first time that session,
it flickers form disabled to enabled.
4. When you restart the game in intelljidea the console sometimes does not terminate.
5. At generation of authentication, you need to go into a new instance for vc to work.
6. When you package it in powershell, and play the game and exit the music continues to play. I cannot find it in task-
manager, and need a computer-restart. Not sure if this happened for the other tester.
(1-3 potentially fixed)

Easy change:

1. If port 2051 is already in use go to this "var voiceListener = new TcpListener(IPAddress.Any, 2051);" on the server
and change it to what you want.
2. To make it Opus based instead of raw PCM, both have upsides (Opus takes cpu usage for clients, to encode to that, and
should make people not hear keyboard and mouthbreathing that much, while PCM is a little better quality but requires
10-20 times for bandwidth usage from the server side). "var voiceConfig = new VoiceHandler.VoiceConfig" edit that and
the code below in the server which is tied to it, and replace it with:
"var voiceConfig = new VoiceHandler.VoiceConfig
{
    Codec = VoiceHandler.AudioCodec.Opus,
    OpusBitrate = 24000,
    SampleRate = 48000,
    EnableVolumeAttenuation = true
};
voiceHandler = new VoiceHandler(gameServer, voiceConfig);"


To do:

Make it UDP perhaps.